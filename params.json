{"name":"node-playstore-api","tagline":"node nodejs swagger express cheerio request scraping playstore api rest","body":"This is a node js server that can be used to fetch data from the Google Play Store. API Docs: http://playstore-api.herokuapp.com/docs/\r\n\r\n### Consuming the Service - Examples\r\n\r\nGetting app details about WhatsApp:\r\nhttp://playstore-api.herokuapp.com/playstore/apps/com.whatsapp\r\n\r\n```html\r\n<html>\r\n<head>\r\n  <body>\r\n    <p></p>\r\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\"></script>\r\n    <script>\r\n      var packageID = 'com.whatsapp';\r\n      $.getJSON('http://playstore-api.herokuapp.com/playstore/apps/' + packageID)\r\n      .done(function(appDetails) {\r\n        $('p:last').html(JSON.stringify(appDetails));\r\n      });\r\n    </script>\r\n  </body>\r\n</head>\r\n<html>\r\n```\r\n\r\n\r\n### Project dependancies\r\n\r\n- express: server framework for node\r\n- swagger: framework for writing nice REST API's with documentation \r\n- lru-cache: small library for using LRU cache (to cache the results from play store)\r\n- cheerio: web scrapper for node js\r\n\r\n### Basic Overview\r\n\r\nplayStore.js is responsible for scraping the data from the play store. it uses cheerio (node.js module that allows you to query the HTML result jQuery style) to get data from the play store. when a call to the async function getAppDetails(packageID, callback) is made, if the result is cached (using lru-in-memory-cache), it returns it immediately. if there is a cache miss, it fetches the content from the play store (using request module, http for humans) and queries the html content using cheerio. read more about using cheerio and request to build a simple scraper. \r\n\r\nplayStoreData.js is being used just a method of isolating playStore.js from the actual code written for exposing the data via a REST API. \r\n\r\nplayStoreResources.js exports the API GET method, defining the route and behavior with swagger. \r\n\r\nThe code is then deployed to heroku (see this page on how to do that - it's easy and free), and viola, a nice scalable play store API in minutes.\r\n","google":"UA-48459543-1","note":"Don't delete this file! It's used internally to help with page regeneration."}